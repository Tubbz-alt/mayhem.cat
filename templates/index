<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Benvinguts a mayhem.cat!</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link rel="stylesheet" type="text/css" href="/static/css/mayhem.cat.css">
    <link rel="icon" type="image/png" href="/static/img/mayhem.cat.png" />
  </head>
  <body>
     <div id="overlay"></div>
<script src="/static/js/d3.v3.min.js"></script>
<script src="/static/js/jquery-2.1.3.min.js"></script>
<script type="text/javascript" src="/static/js/rgbhsv.js"></script>
<script>

var num_circles = 50;
var min_circle_size = 50;
var avg_circle_size = 100;

var width, height, nodes, force, svg; 

function hsv_to_rgb(h, s, v)
{
    rgb = hsvToRgb(h, s, v);
    return d3.rgb(Math.floor(rgb[0]), Math.floor(rgb[1]), Math.floor(rgb[2]));
}

function color_init()
{
    var hue = Math.random();
    var saturation = (Math.random() * .3) + .45;
    var value = .95;

    var colors = new Array();
    colors[colors.length] = hsv_to_rgb(hue, saturation, value);  

    hue_1 = hue + (Math.random() * .3);
    if (hue_1 > 1.0)
        hue_1 -= 1.0;

    hue_2 = hue + (Math.random() * .5);
    if (hue_2 > 1.0)
        hue_2 -= 1.0;

    colors[colors.length] = hsv_to_rgb(hue_1, saturation, value);  
    colors[colors.length] = hsv_to_rgb(hue_2, saturation, value);  

    bg_color = hsvToRgb(hue, .5, .5);
    $("body").css('background-color', "rgb(" + Math.floor(bg_color[0]) + "," 
                                             + Math.floor(bg_color[1]) + "," 
                                             + Math.floor(bg_color[2]) + ")");
    return colors;
}

var tick_count = 0;
var start_alpha = .1;
var end_alpha = -.001;
var target_tick = 100;

function init()
{
    $("#overlay").empty();

    width = $( document ).width(),
    height = $( document ).height();

    min_circle_size = width / 15;
    avg_circle_size = width / 20;

    nodes = d3.range(num_circles).map(
        function() 
        { 
            return {radius: Math.random() * avg_circle_size + min_circle_size}; 
        }
    );
    root = nodes[0];
    color = color_init();

    root.radius = 0;
    root.fixed = true;
    tick_count = 0;

    force = d3.layout.force()
        .gravity(0.05)
        .charge(function(d, i) { return i ? 0 : -2000; })
        .nodes(nodes)
        .alpha(.9)
        .size([width, height]);

    force.start();

    svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height);

    svg.selectAll("circle")
        .data(nodes.slice(1))
        .enter().append("circle")
        .attr("r", function(d) { return d.radius; })
        .style("fill", function(d, i) { return color[i % 3]; });


    force.on("tick", function(e) 
    {
      var q = d3.geom.quadtree(nodes),
          i = 0,
          n = nodes.length;

      while (++i < n) q.visit(collide(nodes[i]));

      svg.selectAll("circle")
          .attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });

      tick_count++;
      alpha = (1.0 - (tick_count / target_tick)) * (start_alpha - end_alpha);
      force.alpha(alpha);
    });

    force.on("end", function(e)
    {
        var divs = [];

        $("svg circle").each(function (e) 
        { 
            var i = $(this); 
            cx = Math.trunc(i.attr("cx"));
            cy = Math.trunc(i.attr("cy"));
            r = Math.trunc(i.attr("r"));

            if (cx >= r && cy >= r && cx < (width-r) && cy < (height-r))
            {
                divs[divs.length] = { 
                   'x' : cx, 
                   'y' : cy, 
                   'r' : r
                };
            }
        });

        divs.sort(function(a, b) 
        {
            return b.r - a.r;
        });

        {% for co in content %}
            if ({{ loop.index0 }} < divs.length)
            {
                html = make_div({{ loop.index0 }}, 
                                '{{ co.url }}',
                                divs[{{ loop.index0 }}].r,
                                divs[{{ loop.index0 }}].x,
                                divs[{{ loop.index0 }}].y,
                                "{{ co.alt }}");
                $("#overlay").append(html);
                $("#c{{ loop.index0 }}").css('background-image', 'url(/static/img/{{ co.img }})');
            }
        {% endfor %}
        {% for co in content %}
            $("#c{{ loop.index0 }}").show('fast');
        {% endfor %}
    });
} 

function make_div(index, url, r, x, y, alt)
{
    html = '<a href="' + url + '" target="_blank">';
    html += '<div id="c' + index + '" class="circle-div shrink border-fade" style="top: ' 
                   + (y - r)
                   + 'px; left: ' 
                   + (x - r)
                   + 'px; border-radius: ' 
                   + (r-2)
                   + 'px; width: ' 
                   + ((r * 2) - 2)
                   + 'px; height: ' 
                   + ((r * 2) - 2)
                   + 'px" alt="'
                   + alt + '" title="'
                   + alt + '"></div>';
    html += '</a>';

    return html;
}

function collide(node) {
  var r = node.radius + 16,
      nx1 = node.x - r,
      nx2 = node.x + r,
      ny1 = node.y - r,
      ny2 = node.y + r;
  return function(quad, x1, y1, x2, y2) {
    if (quad.point && (quad.point !== node)) {
      var x = node.x - quad.point.x,
          y = node.y - quad.point.y,
          l = Math.sqrt(x * x + y * y),
          r = node.radius + quad.point.radius;
      if (l < r) {
        l = (l - r) / l * .5;
        node.x -= x *= l;
        node.y -= y *= l;
        quad.point.x += x;
        quad.point.y += y;
      }
    }
    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
  };
}

$(document).ready(function() 
{
    init();
});

$(window).resize(function() 
{
    force.stop();
    force = null;
    d3.select("svg").remove();
    init();
});

</script>
